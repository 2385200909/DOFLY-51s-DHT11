C51 COMPILER V9.59.0.0   24C02                                                             12/14/2021 16:50:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE 24C02
OBJECT MODULE PLACED IN .\Objects\24c02.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 24c02.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\24c
                    -02.lst) TABS(2) OBJECT(.\Objects\24c02.obj)

line level    source

   1          /*-----------------------------------------------
   2            名称：IIC协议 EEPROM24c02
   3            论坛：www.doflye.net
   4            编写：shifang
   5            修改：无
   6            内容：此程序用于检测EEPROM性能，测试方法如下：写入24c02一些数据，然后在内存中清除这些数据，
   7                  掉电后主内存将失去这些信息，然后从24c02中调入这些数据。看是否与写入的相同。
   8              函数是采用软件延时的方法产生SCL脉冲,固对高晶振频率要作 一定的修改....(本例是1us机器
   9              周期,即晶振频率要小于12MHZ)
  10          ------------------------------------------------*/  
  11          #include <24c02.h>
  12          #include <delay.h>
  13          #include <reg52.h>          //头文件的包含
  14          #include <intrins.h>
  15                  
  16          
  17          /*------------------------------------------------
  18                              启动总线
  19          ------------------------------------------------*/
  20          void Start_I2c()
  21          {
  22   1        SDA=1;   //发送起始条件的数据信号
  23   1        _Nop();
  24   1        SCL=1;
  25   1        _Nop();    //起始条件建立时间大于4.7us,延时
  26   1        _Nop();
  27   1        _Nop();
  28   1        _Nop();
  29   1        _Nop();    
  30   1        SDA=0;     //发送起始信号
  31   1        _Nop();    //起始条件锁定时间大于4μ
  32   1        _Nop();
  33   1        _Nop();
  34   1        _Nop();
  35   1        _Nop();       
  36   1        SCL=0;    //钳住I2C总线，准备发送或接收数据
  37   1        _Nop();
  38   1        _Nop();
  39   1      }
  40          /*------------------------------------------------
  41                              结束总线
  42          ------------------------------------------------*/
  43          void Stop_I2c()
  44          {
  45   1        SDA=0;    //发送结束条件的数据信号
  46   1        _Nop();   //发送结束条件的时钟信号
  47   1        SCL=1;    //结束条件建立时间大于4μ
  48   1        _Nop();
  49   1        _Nop();
  50   1        _Nop();
  51   1        _Nop();
  52   1        _Nop();
  53   1        SDA=1;    //发送I2C总线结束信号
  54   1        _Nop();
C51 COMPILER V9.59.0.0   24C02                                                             12/14/2021 16:50:09 PAGE 2   

  55   1        _Nop();
  56   1        _Nop();
  57   1        _Nop();
  58   1      }
  59          
  60          
  61          
  62          
  63          /*----------------------------------------------------------------
  64                           字节数据传送函数               
  65          函数原型: void  SendByte(unsigned char c);
  66          功能:  将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  67               此状态位进行操作.(不应答或非应答都使ack=0 假)     
  68               发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  69          ------------------------------------------------------------------*/
  70          void  Send_Byte(unsigned char c)
  71          {
  72   1       unsigned char BitCnt;
  73   1       
  74   1       for(BitCnt=0;BitCnt<8;BitCnt++)  //要传送的数据长度为8位
  75   1          {
  76   2           if((c<<BitCnt)&0x80)SDA=1;   //判断发送位
  77   2             else  SDA=0;                
  78   2           _Nop();
  79   2           SCL=1;               //置时钟线为高，通知被控器开始接收数据位
  80   2            _Nop(); 
  81   2            _Nop();             //保证时钟高电平周期大于4μ
  82   2            _Nop();
  83   2            _Nop();
  84   2            _Nop();         
  85   2           SCL=0; 
  86   2          }
  87   1          
  88   1          _Nop();
  89   1          _Nop();
  90   1          SDA=1;               //8位发送完后释放数据线，准备接收应答位
  91   1          _Nop();
  92   1          _Nop();   
  93   1          SCL=1;
  94   1          _Nop();
  95   1          _Nop();
  96   1          _Nop();
  97   1          if(SDA==1)ack=0;     
  98   1             else ack=1;        //判断是否接收到应答信号
  99   1          SCL=0;
 100   1          _Nop();
 101   1          _Nop();
 102   1      }
 103          
 104          
 105          
 106          
 107          
 108          
 109          
 110          /*----------------------------------------------------------------
 111                           字节数据传送函数               
 112          函数原型: unsigned char  RcvByte();
 113          功能:  用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
 114               发完后请用应答函数。  
 115          ------------------------------------------------------------------*/  
 116          unsigned char  RcvByte()
C51 COMPILER V9.59.0.0   24C02                                                             12/14/2021 16:50:09 PAGE 3   

 117          {
 118   1        unsigned char retc;
 119   1        unsigned char BitCnt;
 120   1        
 121   1        retc=0; 
 122   1        SDA=1;             //置数据线为输入方式
 123   1        for(BitCnt=0;BitCnt<8;BitCnt++)
 124   1            {
 125   2              _Nop();           
 126   2              SCL=0;       //置时钟线为低，准备接收数据位
 127   2              _Nop();
 128   2              _Nop();      //时钟低电平周期大于4.7us
 129   2              _Nop();
 130   2              _Nop();
 131   2              _Nop();
 132   2              SCL=1;       //置时钟线为高使数据线上数据有效
 133   2              _Nop();
 134   2              _Nop();
 135   2              retc=retc<<1;
 136   2              if(SDA==1)retc=retc+1; //读数据位,接收的数据位放入retc中
 137   2              _Nop();
 138   2              _Nop(); 
 139   2            }
 140   1        SCL=0;    
 141   1        _Nop();
 142   1        _Nop();
 143   1        return(retc);
 144   1      }
 145          
 146          
 147          
 148          /*----------------------------------------------------------------
 149                               应答子函数
 150          原型:  void Ack_I2c(void);
 151           
 152          ----------------------------------------------------------------*/
 153          void Ack_I2c(void)
 154          {
 155   1        
 156   1        SDA=0;     
 157   1        _Nop();
 158   1        _Nop();
 159   1        _Nop();      
 160   1        SCL=1;
 161   1        _Nop();
 162   1        _Nop();              //时钟低电平周期大于4μ
 163   1        _Nop();
 164   1        _Nop();
 165   1        _Nop();  
 166   1        SCL=0;               //清时钟线，钳住I2C总线以便继续接收
 167   1        _Nop();
 168   1        _Nop();    
 169   1      }
 170          /*----------------------------------------------------------------
 171                               非应答子函数
 172          原型:  void NoAck_I2c(void);
 173           
 174          ----------------------------------------------------------------*/
 175          void NoAck_I2c(void)
 176          {
 177   1        
 178   1        SDA=1;
C51 COMPILER V9.59.0.0   24C02                                                             12/14/2021 16:50:09 PAGE 4   

 179   1        _Nop();
 180   1        _Nop();
 181   1        _Nop();      
 182   1        SCL=1;
 183   1        _Nop();
 184   1        _Nop();              //时钟低电平周期大于4μ
 185   1        _Nop();
 186   1        _Nop();
 187   1        _Nop();  
 188   1        SCL=0;                //清时钟线，钳住I2C总线以便继续接收
 189   1        _Nop();
 190   1        _Nop();    
 191   1      }
 192          
 193          
 194          
 195          
 196          
 197          
 198          /*----------------------------------------------------------------
 199                              向无子地址器件发送字节数据函数               
 200          函数原型: bit  ISendByte(unsigned char sla,ucahr c);  
 201          功能:     从启动总线到发送地址，数据，结束总线的全过程,从器件地址sla.
 202                     如果返回1表示操作成功，否则操作有误。
 203          注意：    使用前必须已结束总线。
 204          ----------------------------------------------------------------*/
 205          /*bit ISendByte(unsigned char sla,unsigned char c)
 206          {
 207             Start_I2c();               //启动总线
 208             SendByte(sla);             //发送器件地址
 209               if(ack==0)return(0);
 210             SendByte(c);               //发送数据
 211               if(ack==0)return(0);
 212            Stop_I2c();                 //结束总线
 213            return(1);
 214          }
 215          */
 216          
 217          /*----------------------------------------------------------------
 218                              向有子地址器件发送多字节数据函数               
 219          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 220          功能:     从启动总线到发送地址，子地址,数据，结束总线的全过程,从器件
 221                    地址sla，子地址suba，发送内容是s指向的内容，发送no个字节。
 222                     如果返回1表示操作成功，否则操作有误。
 223          注意：    使用前必须已结束总线。
 224          ----------------------------------------------------------------*/
 225          bit ISendStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 226          {
 227   1         unsigned char i;
 228   1      
 229   1         Start_I2c();               //启动总线
 230   1         Send_Byte(sla);             //发送器件地址
 231   1           if(ack==0)return(0);
 232   1         Send_Byte(suba);            //发送器件子地址
 233   1           if(ack==0)return(0);
 234   1      
 235   1         for(i=0;i<no;i++)
 236   1          {   
 237   2           Send_Byte(*s);            //发送数据
 238   2           DelayMs(1);
 239   2             if(ack==0)return(0);
 240   2           s++;
C51 COMPILER V9.59.0.0   24C02                                                             12/14/2021 16:50:09 PAGE 5   

 241   2          } 
 242   1       Stop_I2c();                  //结束总线
 243   1        return(1);
 244   1      }
 245          
 246          /*----------------------------------------------------------------
 247                              向无子地址器件读字节数据函数               
 248          函数原型: bit  IRcvByte(unsigned char sla,ucahr *c);  
 249          功能:     从启动总线到发送地址，读数据，结束总线的全过程,从器件地
 250                    址sla，返回值在c.
 251                     如果返回1表示操作成功，否则操作有误。
 252          注意：    使用前必须已结束总线。
 253          ----------------------------------------------------------------*/
 254          /*bit IRcvByte(unsigned char sla,unsigned char *c)
 255          {
 256             Start_I2c();                //启动总线
 257             SendByte(sla+1);            //发送器件地址
 258               if(ack==0)return(0);
 259             *c=RcvByte();               //读取数据
 260               NoAck_I2c();              //发送非就答位
 261               Stop_I2c();               //结束总线
 262            return(1);
 263          }
 264          
 265          */
 266          /*----------------------------------------------------------------
 267                              向有子地址器件读取多字节数据函数               
 268          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 269          功能:     从启动总线到发送地址，子地址,读数据，结束总线的全过程,从器件
 270                    地址sla，子地址suba，读出的内容放入s指向的存储区，读no个字节。
 271                     如果返回1表示操作成功，否则操作有误。
 272          注意：    使用前必须已结束总线。
 273          ----------------------------------------------------------------*/
 274          bit IRcvStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 275          {
 276   1         unsigned char i;
 277   1      
 278   1         Start_I2c();               //启动总线
 279   1         Send_Byte(sla);             //发送器件地址
 280   1           if(ack==0)return(0);
 281   1         Send_Byte(suba);            //发送器件子地址
 282   1           if(ack==0)return(0);
 283   1      
 284   1         Start_I2c();
 285   1         Send_Byte(sla+1);
 286   1            if(ack==0)return(0);
 287   1      
 288   1         for(i=0;i<no-1;i++)
 289   1          {   
 290   2           *s=RcvByte();              //发送数据
 291   2            Ack_I2c();                //发送就答位 
 292   2           s++;
 293   2          } 
 294   1         *s=RcvByte();
 295   1          NoAck_I2c();                 //发送非应位
 296   1         Stop_I2c();                    //结束总线
 297   1        return(1);
 298   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    350    ----
C51 COMPILER V9.59.0.0   24C02                                                             12/14/2021 16:50:09 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
